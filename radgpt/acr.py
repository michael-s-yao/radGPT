"""
Defines the ACR Appropriateness Criteria interface.

Author(s):
    Michael Yao @michael-s-yao
    Allison Chae @allisonjchae

Licensed under the MIT License. Copyright University of Pennsylvania 2024.
"""
import json
import jsonlines
import os
from pathlib import Path
from typing import Sequence, Union


class AppropriatenessCriteria:
    # String corresponding to when no diagnostic imaging is indicated.
    NO_IMAGING_INDICATION: str = "None"

    def __init__(
        self,
        criteria_fn: Union[Path, str] = os.path.join(
            os.path.dirname(__file__), "ac.json"
        ),
        guidelines_fn: Union[Path, str] = os.path.join(
            os.path.dirname(__file__), "guidelines.jsonl"
        ),
        **kwargs
    ):
        """
        Args:
            criteria_fn: the name of the Appropriateness Criteria file.
            guidelines_fn: the name of the file that matches ACR AC topics to
                scenarios and corresponding imaging study indications. The file
                can be scraped from the ACR AC website and generated by running
                the `build_imaging_recs.py` script in the `scripts` directory.
        """
        assert os.path.isfile(criteria_fn)
        with open(criteria_fn, "r") as f:
            self._criteria = json.load(f)

        assert os.path.isfile(guidelines_fn), (
            "Did you run the `scripts/build_imaging_recs.py` script?"
        )
        with open(guidelines_fn, "r") as f:
            with jsonlines.Reader(f) as reader:
                self.guidelines = list(reader)
        self._topic = list(self._criteria["topics"].keys())
        self._panel = list(self._criteria["panels"].keys())

    def __len__(self) -> int:
        """
        Returns the number of topics in the Appropriateness Criteria dataset.
        Input:
            None.
        Returns:
            The number of topics in the Appropriateness Criteria dataset.
        """
        return len(self.topics)

    @property
    def topics(self) -> Sequence[str]:
        """
        Returns the topics of the Appropriateness Criteria.
        Input:
            None.
        Returns:
            The topics of the Appropriateness Criteria.
        """
        return self._topic

    @property
    def panels(self) -> Sequence[str]:
        """
        Returns the parent panels of the Appropriateness Criteria.
        Input:
            None.
        Returns:
            The parent panels of the Appropriateness Criteria.
        """
        return self._panel

    @property
    def studies(self) -> Sequence[str]:
        """
        Returns a list of the possible imaging studies.
        Input:
            None.
        Returns:
            A list of the possible imaging studies.
        """
        all_studies = set([])
        for sc in map(lambda guide: guide["Scenarios"], self.guidelines):
            studies = sum([rec["Studies"] for rec in sc], [])
            all_studies.update(set([rec["Procedure"] for rec in studies]))
        return sorted(list(all_studies)) + [self.NO_IMAGING_INDICATION]

    @property
    def url(self) -> str:
        """
        Returns the source URL of the Appropriateness Criteria.
        Input:
            None.
        Returns:
            The source URL of the Appropriateness Criteria.
        """
        return self._criteria["metadata"]["base_url"]

    @property
    def access_date(self) -> str:
        """
        Returns the date that the Appropriateness Criteria was accessed.
        Input:
            None.
        Returns:
            The date that the Appropriateness Criteria was accessed.
        """
        return self._criteria["metadata"]["access_date"]

    def map_topic_to_imaging_study(self, topic: str) -> Sequence[str]:
        """
        Maps an ACR AC topic to a list of imaging studies that are aligned
        with the ACR AC guidelines.
        Input:
            topic: the input ACR AC topic.
        Returns:
            A list of the appropriate imaging studies for the topic.
        """
        assert topic in self.topics
        guide = next(
            filter(lambda doc: topic == doc["Topic"], self.guidelines)
        )
        default_sc = next(iter(guide["Scenarios"]))
        recs = filter(
            lambda img: img["Appropriateness Category"] == (
                "Usually appropriate"
            ),
            default_sc["Studies"]
        )
        recs = [img["Procedure"] for img in recs]
        if len(recs):
            return recs
        return [self.NO_IMAGING_INDICATION]
